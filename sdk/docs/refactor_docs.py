import os
import re

# This script refactors the webpages generated by Doxygen. The main actions are:
# 1. It refactors the file names by removing "1_1_" and "tokenio_" from the names.
# 	"1_1" means "::" and "tokenio" is the root namespace which is redundant.
# 2. It makes the fragment links readable. The generated fragment links are hashes
# 	which look like "a0020700128f2af94b109f10f567b3098", the script changes the links
# 	to the actually method/property names like "GetBalance". For overrided methods,
# 	the link will look like: "RedeemToken-1", "RedeemToken-2", etc.

path = './html'
os.chdir(path)

substitutions = {}
files = os.listdir('.')

for name in files:
	new_name = name.replace('1_1_', '').replace('tokenio_', '')
	if new_name != name:
		os.rename(name, new_name)
		substitutions[name.rsplit('.', 1)[0]] = new_name.rsplit('.', 1)[0]

files = list(filter(lambda f: f.endswith('.html'), os.listdir('.')))

non_override = re.compile("<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#([^<]+)\">&#9670;&nbsp;</a></span>([^<]+)</h2>")
override = re.compile("<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#([^<]+)\">&#9670;&nbsp;</a></span>([^<]+)\(\) <span class=\"overload\">\[([\d]+)/([\d]+)\]</span></h2>")

for name in files:
	with open(name) as file:
		content = file.read()
		results = re.finditer(non_override, content)
		for result in results:
			hash_id = result.group(1)
			member_name = result.group(2).replace('()', '')
			substitutions[hash_id] = member_name

		results = re.finditer(override, content)
		for result in results:
			hash_id = result.group(1)
			member_name = result.group(2) + '-' + result.group(3)
			substitutions[hash_id] = member_name

files = list(filter(lambda f: f.endswith('.html') or f.endswith('.js'), os.listdir('.')))

for name in files:
	with open(name) as file:
		content=file.read()
	with open(name, 'w') as file:
		for old, new in substitutions.items():
			content = content.replace(old, new)
		file.write(content)
