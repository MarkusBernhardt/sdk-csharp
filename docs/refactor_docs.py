import os
import re
import sys

# This script refactors the webpages generated by Doxygen. The main actions are:
# 1. It refactors the file names by removing "1_1_" and "tokenio_" from the names.
#   "1_1" means "::" and "tokenio" is the root namespace which is redundant.
# 2. It makes the fragment links readable. The generated fragment links are hashes
#   which look like "a0020700128f2af94b109f10f567b3098", the script changes the links
#   to the actually method/property names like "GetBalance". For overrided methods,
#   the link will look like: "RedeemToken-1", "RedeemToken-2", etc.

path = sys.argv[1] + '/html'
os.chdir(path)

substitutions = {}
files = os.listdir('.')

for name in files:
    new_name = name.replace('1_1_', '').replace('tokenio_', '')
    if new_name != name:
        os.rename(name, new_name)
        substitutions[name.rsplit('.', 1)[0]] = new_name.rsplit('.', 1)[0]

html_files = list(filter(lambda f: f.endswith('.html'), os.listdir('.')))

# Methods that don't have overrides.
non_override = re.compile("<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#([^<]+)\">&#9670;&nbsp;</a></span>([^<]+)</h2>")
# Methods that have overrides.
override = re.compile("<h2 class=\"memtitle\"><span class=\"permalink\"><a href=\"#([^<]+)\">&#9670;&nbsp;</a></span>([^<]+)\(\) <span class=\"overload\">\[([\d]+)/([\d]+)\]</span></h2>")

for name in html_files:
    with open(name) as file:
        content = file.read()
        results = re.finditer(non_override, content)
        for result in results:
            hash_id = result.group(1)
            method_name = result.group(2).replace('()', '')
            substitutions[hash_id] = method_name

        results = re.finditer(override, content)
        for result in results:
            hash_id = result.group(1)
            method_name = result.group(2) + '-' + result.group(3)
            substitutions[hash_id] = method_name

all_files = os.listdir('.') + list(map(lambda name: 'search/' + name, os.listdir('./search')))
files_to_modify = list(filter(lambda f: f.endswith('.html') or f.endswith('.js'), all_files))

for name in files_to_modify:
    with open(name) as file:
        content=file.read()
    with open(name, 'w') as file:
        # Substitutions start from the longest key in case the longer keys contain the short keys
        for old, new in sorted(substitutions.items(), key=lambda x: len(x[0]), reverse=True):
            content = content.replace(old, new)
        file.write(content)
