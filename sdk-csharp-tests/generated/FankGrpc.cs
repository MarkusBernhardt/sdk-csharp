// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fank/fank/fank.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Io.Token.Proto.Bankapi {
  /// <summary>
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  /// Fank testing API, used to create accounts on the fly. Used for testing.
  /// </summary>
  public static partial class FankService
  {
    static readonly string __ServiceName = "io.token.proto.bankapi.FankService";

    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.AddClientRequest> __Marshaller_AddClientRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.AddClientRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.AddClientResponse> __Marshaller_AddClientResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.AddClientResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetClientRequest> __Marshaller_GetClientRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetClientRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetClientResponse> __Marshaller_GetClientResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetClientResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.AddAccountRequest> __Marshaller_AddAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.AddAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.AddAccountResponse> __Marshaller_AddAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.AddAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetAccountsRequest> __Marshaller_GetAccountsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetAccountsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetAccountsResponse> __Marshaller_GetAccountsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetAccountsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetAccountRequest> __Marshaller_GetAccountRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetAccountRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetAccountResponse> __Marshaller_GetAccountResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetAccountResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest> __Marshaller_AuthorizeLinkAccountsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Tokenio.Proto.BankLink.BankAuthorization> __Marshaller_BankAuthorization = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Tokenio.Proto.BankLink.BankAuthorization.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest> __Marshaller_GetOauthAccessTokenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse> __Marshaller_GetOauthAccessTokenResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetNotificationRequest> __Marshaller_GetNotificationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetNotificationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetNotificationResponse> __Marshaller_GetNotificationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetNotificationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetNotificationsRequest> __Marshaller_GetNotificationsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetNotificationsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.GetNotificationsResponse> __Marshaller_GetNotificationsResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.GetNotificationsResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.VerifyAliasRequest> __Marshaller_VerifyAliasRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.VerifyAliasRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Io.Token.Proto.Bankapi.VerifyAliasResponse> __Marshaller_VerifyAliasResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Io.Token.Proto.Bankapi.VerifyAliasResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.AddClientRequest, global::Io.Token.Proto.Bankapi.AddClientResponse> __Method_AddClient = new grpc::Method<global::Io.Token.Proto.Bankapi.AddClientRequest, global::Io.Token.Proto.Bankapi.AddClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddClient",
        __Marshaller_AddClientRequest,
        __Marshaller_AddClientResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.GetClientRequest, global::Io.Token.Proto.Bankapi.GetClientResponse> __Method_GetClient = new grpc::Method<global::Io.Token.Proto.Bankapi.GetClientRequest, global::Io.Token.Proto.Bankapi.GetClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetClient",
        __Marshaller_GetClientRequest,
        __Marshaller_GetClientResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.AddAccountRequest, global::Io.Token.Proto.Bankapi.AddAccountResponse> __Method_AddAccount = new grpc::Method<global::Io.Token.Proto.Bankapi.AddAccountRequest, global::Io.Token.Proto.Bankapi.AddAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddAccount",
        __Marshaller_AddAccountRequest,
        __Marshaller_AddAccountResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.GetAccountsRequest, global::Io.Token.Proto.Bankapi.GetAccountsResponse> __Method_GetAccounts = new grpc::Method<global::Io.Token.Proto.Bankapi.GetAccountsRequest, global::Io.Token.Proto.Bankapi.GetAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccounts",
        __Marshaller_GetAccountsRequest,
        __Marshaller_GetAccountsResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.GetAccountRequest, global::Io.Token.Proto.Bankapi.GetAccountResponse> __Method_GetAccount = new grpc::Method<global::Io.Token.Proto.Bankapi.GetAccountRequest, global::Io.Token.Proto.Bankapi.GetAccountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccount",
        __Marshaller_GetAccountRequest,
        __Marshaller_GetAccountResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest, global::Tokenio.Proto.BankLink.BankAuthorization> __Method_AuthorizeLinkAccounts = new grpc::Method<global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest, global::Tokenio.Proto.BankLink.BankAuthorization>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthorizeLinkAccounts",
        __Marshaller_AuthorizeLinkAccountsRequest,
        __Marshaller_BankAuthorization);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest, global::Tokenio.Proto.BankLink.BankAuthorization> __Method_AuthorizeLinkAccountsGet = new grpc::Method<global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest, global::Tokenio.Proto.BankLink.BankAuthorization>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuthorizeLinkAccountsGet",
        __Marshaller_AuthorizeLinkAccountsRequest,
        __Marshaller_BankAuthorization);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest, global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse> __Method_GetOauthAccessToken = new grpc::Method<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest, global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOauthAccessToken",
        __Marshaller_GetOauthAccessTokenRequest,
        __Marshaller_GetOauthAccessTokenResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.GetNotificationRequest, global::Io.Token.Proto.Bankapi.GetNotificationResponse> __Method_GetNotification = new grpc::Method<global::Io.Token.Proto.Bankapi.GetNotificationRequest, global::Io.Token.Proto.Bankapi.GetNotificationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotification",
        __Marshaller_GetNotificationRequest,
        __Marshaller_GetNotificationResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.GetNotificationsRequest, global::Io.Token.Proto.Bankapi.GetNotificationsResponse> __Method_GetNotifications = new grpc::Method<global::Io.Token.Proto.Bankapi.GetNotificationsRequest, global::Io.Token.Proto.Bankapi.GetNotificationsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNotifications",
        __Marshaller_GetNotificationsRequest,
        __Marshaller_GetNotificationsResponse);

    static readonly grpc::Method<global::Io.Token.Proto.Bankapi.VerifyAliasRequest, global::Io.Token.Proto.Bankapi.VerifyAliasResponse> __Method_VerifyAlias = new grpc::Method<global::Io.Token.Proto.Bankapi.VerifyAliasRequest, global::Io.Token.Proto.Bankapi.VerifyAliasResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyAlias",
        __Marshaller_VerifyAliasRequest,
        __Marshaller_VerifyAliasResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Io.Token.Proto.Bankapi.FankReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FankService</summary>
    public abstract partial class FankServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.AddClientResponse> AddClient(global::Io.Token.Proto.Bankapi.AddClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.GetClientResponse> GetClient(global::Io.Token.Proto.Bankapi.GetClientRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.AddAccountResponse> AddAccount(global::Io.Token.Proto.Bankapi.AddAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.GetAccountsResponse> GetAccounts(global::Io.Token.Proto.Bankapi.GetAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.GetAccountResponse> GetAccount(global::Io.Token.Proto.Bankapi.GetAccountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tokenio.Proto.BankLink.BankAuthorization> AuthorizeLinkAccounts(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Tokenio.Proto.BankLink.BankAuthorization> AuthorizeLinkAccountsGet(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Used by bank-demo to obtain access token.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse> GetOauthAccessToken(global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///
      /// Used by clients to make sure that notifications were routed and correctly delivered to
      /// the fank. This is mainly for testing the flow where a notification is sent through a bank
      /// instead of straight to devices.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.GetNotificationResponse> GetNotification(global::Io.Token.Proto.Bankapi.GetNotificationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.GetNotificationsResponse> GetNotifications(global::Io.Token.Proto.Bankapi.GetNotificationsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Io.Token.Proto.Bankapi.VerifyAliasResponse> VerifyAlias(global::Io.Token.Proto.Bankapi.VerifyAliasRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FankService</summary>
    public partial class FankServiceClient : grpc::ClientBase<FankServiceClient>
    {
      /// <summary>Creates a new client for FankService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public FankServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FankService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public FankServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected FankServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected FankServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Io.Token.Proto.Bankapi.AddClientResponse AddClient(global::Io.Token.Proto.Bankapi.AddClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.AddClientResponse AddClient(global::Io.Token.Proto.Bankapi.AddClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddClient, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.AddClientResponse> AddClientAsync(global::Io.Token.Proto.Bankapi.AddClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.AddClientResponse> AddClientAsync(global::Io.Token.Proto.Bankapi.AddClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddClient, null, options, request);
      }
      public virtual global::Io.Token.Proto.Bankapi.GetClientResponse GetClient(global::Io.Token.Proto.Bankapi.GetClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.GetClientResponse GetClient(global::Io.Token.Proto.Bankapi.GetClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetClient, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetClientResponse> GetClientAsync(global::Io.Token.Proto.Bankapi.GetClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetClientResponse> GetClientAsync(global::Io.Token.Proto.Bankapi.GetClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetClient, null, options, request);
      }
      public virtual global::Io.Token.Proto.Bankapi.AddAccountResponse AddAccount(global::Io.Token.Proto.Bankapi.AddAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.AddAccountResponse AddAccount(global::Io.Token.Proto.Bankapi.AddAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.AddAccountResponse> AddAccountAsync(global::Io.Token.Proto.Bankapi.AddAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.AddAccountResponse> AddAccountAsync(global::Io.Token.Proto.Bankapi.AddAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddAccount, null, options, request);
      }
      public virtual global::Io.Token.Proto.Bankapi.GetAccountsResponse GetAccounts(global::Io.Token.Proto.Bankapi.GetAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.GetAccountsResponse GetAccounts(global::Io.Token.Proto.Bankapi.GetAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccounts, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetAccountsResponse> GetAccountsAsync(global::Io.Token.Proto.Bankapi.GetAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetAccountsResponse> GetAccountsAsync(global::Io.Token.Proto.Bankapi.GetAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccounts, null, options, request);
      }
      public virtual global::Io.Token.Proto.Bankapi.GetAccountResponse GetAccount(global::Io.Token.Proto.Bankapi.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.GetAccountResponse GetAccount(global::Io.Token.Proto.Bankapi.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetAccountResponse> GetAccountAsync(global::Io.Token.Proto.Bankapi.GetAccountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetAccountResponse> GetAccountAsync(global::Io.Token.Proto.Bankapi.GetAccountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccount, null, options, request);
      }
      public virtual global::Tokenio.Proto.BankLink.BankAuthorization AuthorizeLinkAccounts(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthorizeLinkAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tokenio.Proto.BankLink.BankAuthorization AuthorizeLinkAccounts(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthorizeLinkAccounts, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tokenio.Proto.BankLink.BankAuthorization> AuthorizeLinkAccountsAsync(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthorizeLinkAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tokenio.Proto.BankLink.BankAuthorization> AuthorizeLinkAccountsAsync(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthorizeLinkAccounts, null, options, request);
      }
      public virtual global::Tokenio.Proto.BankLink.BankAuthorization AuthorizeLinkAccountsGet(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthorizeLinkAccountsGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Tokenio.Proto.BankLink.BankAuthorization AuthorizeLinkAccountsGet(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuthorizeLinkAccountsGet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Tokenio.Proto.BankLink.BankAuthorization> AuthorizeLinkAccountsGetAsync(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthorizeLinkAccountsGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Tokenio.Proto.BankLink.BankAuthorization> AuthorizeLinkAccountsGetAsync(global::Io.Token.Proto.Bankapi.AuthorizeLinkAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuthorizeLinkAccountsGet, null, options, request);
      }
      /// <summary>
      ///
      /// Used by bank-demo to obtain access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse GetOauthAccessToken(global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOauthAccessToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Used by bank-demo to obtain access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse GetOauthAccessToken(global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOauthAccessToken, null, options, request);
      }
      /// <summary>
      ///
      /// Used by bank-demo to obtain access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse> GetOauthAccessTokenAsync(global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOauthAccessTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Used by bank-demo to obtain access token.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetOauthAccessTokenResponse> GetOauthAccessTokenAsync(global::Io.Token.Proto.Bankapi.GetOauthAccessTokenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOauthAccessToken, null, options, request);
      }
      /// <summary>
      ///
      /// Used by clients to make sure that notifications were routed and correctly delivered to
      /// the fank. This is mainly for testing the flow where a notification is sent through a bank
      /// instead of straight to devices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Io.Token.Proto.Bankapi.GetNotificationResponse GetNotification(global::Io.Token.Proto.Bankapi.GetNotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotification(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Used by clients to make sure that notifications were routed and correctly delivered to
      /// the fank. This is mainly for testing the flow where a notification is sent through a bank
      /// instead of straight to devices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Io.Token.Proto.Bankapi.GetNotificationResponse GetNotification(global::Io.Token.Proto.Bankapi.GetNotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotification, null, options, request);
      }
      /// <summary>
      ///
      /// Used by clients to make sure that notifications were routed and correctly delivered to
      /// the fank. This is mainly for testing the flow where a notification is sent through a bank
      /// instead of straight to devices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetNotificationResponse> GetNotificationAsync(global::Io.Token.Proto.Bankapi.GetNotificationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// Used by clients to make sure that notifications were routed and correctly delivered to
      /// the fank. This is mainly for testing the flow where a notification is sent through a bank
      /// instead of straight to devices.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetNotificationResponse> GetNotificationAsync(global::Io.Token.Proto.Bankapi.GetNotificationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotification, null, options, request);
      }
      public virtual global::Io.Token.Proto.Bankapi.GetNotificationsResponse GetNotifications(global::Io.Token.Proto.Bankapi.GetNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotifications(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.GetNotificationsResponse GetNotifications(global::Io.Token.Proto.Bankapi.GetNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNotifications, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetNotificationsResponse> GetNotificationsAsync(global::Io.Token.Proto.Bankapi.GetNotificationsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNotificationsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.GetNotificationsResponse> GetNotificationsAsync(global::Io.Token.Proto.Bankapi.GetNotificationsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNotifications, null, options, request);
      }
      public virtual global::Io.Token.Proto.Bankapi.VerifyAliasResponse VerifyAlias(global::Io.Token.Proto.Bankapi.VerifyAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyAlias(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Io.Token.Proto.Bankapi.VerifyAliasResponse VerifyAlias(global::Io.Token.Proto.Bankapi.VerifyAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyAlias, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.VerifyAliasResponse> VerifyAliasAsync(global::Io.Token.Proto.Bankapi.VerifyAliasRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyAliasAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Io.Token.Proto.Bankapi.VerifyAliasResponse> VerifyAliasAsync(global::Io.Token.Proto.Bankapi.VerifyAliasRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyAlias, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override FankServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FankServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(FankServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddClient, serviceImpl.AddClient)
          .AddMethod(__Method_GetClient, serviceImpl.GetClient)
          .AddMethod(__Method_AddAccount, serviceImpl.AddAccount)
          .AddMethod(__Method_GetAccounts, serviceImpl.GetAccounts)
          .AddMethod(__Method_GetAccount, serviceImpl.GetAccount)
          .AddMethod(__Method_AuthorizeLinkAccounts, serviceImpl.AuthorizeLinkAccounts)
          .AddMethod(__Method_AuthorizeLinkAccountsGet, serviceImpl.AuthorizeLinkAccountsGet)
          .AddMethod(__Method_GetOauthAccessToken, serviceImpl.GetOauthAccessToken)
          .AddMethod(__Method_GetNotification, serviceImpl.GetNotification)
          .AddMethod(__Method_GetNotifications, serviceImpl.GetNotifications)
          .AddMethod(__Method_VerifyAlias, serviceImpl.VerifyAlias).Build();
    }

  }
}
#endregion
